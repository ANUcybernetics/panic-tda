"""simplify_clustering_schema_use_medoid_as_cluster_id

Revision ID: 83fb17def420
Revises: f0ec8e9694a0
Create Date: 2025-07-30 09:30:56.731028

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision: str = "83fb17def420"
down_revision: Union[str, Sequence[str], None] = "f0ec8e9694a0"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Drop the cluster table if it exists
    from sqlalchemy import inspect

    conn = op.get_bind()
    inspector = inspect(conn)

    # Check if cluster table exists before trying to drop it
    if "cluster" in inspector.get_table_names():
        try:
            op.drop_index(op.f("ix_cluster_clustering_result_id"), table_name="cluster")
        except:
            pass
        try:
            op.drop_index(op.f("ix_cluster_medoid_embedding_id"), table_name="cluster")
        except:
            pass
        op.drop_table("cluster")

    # For SQLite, we need to recreate the embeddingcluster table due to limited ALTER support
    # First, rename the old table
    op.rename_table("embeddingcluster", "embeddingcluster_old")

    # Create the new table with the correct schema
    op.create_table(
        "embeddingcluster",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("embedding_id", sa.Uuid(), nullable=False),
        sa.Column("clustering_result_id", sa.Uuid(), nullable=False),
        sa.Column("medoid_embedding_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["clustering_result_id"],
            ["clusteringresult.id"],
        ),
        sa.ForeignKeyConstraint(
            ["embedding_id"],
            ["embedding.id"],
        ),
        sa.ForeignKeyConstraint(
            ["medoid_embedding_id"],
            ["embedding.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "embedding_id", "clustering_result_id", name="unique_embedding_clustering"
        ),
    )
    op.create_index(
        op.f("ix_embeddingcluster_clustering_result_id"),
        "embeddingcluster",
        ["clustering_result_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_embeddingcluster_embedding_id"),
        "embeddingcluster",
        ["embedding_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_embeddingcluster_medoid_embedding_id"),
        "embeddingcluster",
        ["medoid_embedding_id"],
        unique=False,
    )

    # Drop the old table
    op.drop_table("embeddingcluster_old")


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "embeddingcluster", sa.Column("cluster_id", sa.NUMERIC(), nullable=False)
    )
    op.drop_constraint(None, "embeddingcluster", type_="foreignkey")
    op.create_foreign_key(None, "embeddingcluster", "cluster", ["cluster_id"], ["id"])
    op.drop_index(
        op.f("ix_embeddingcluster_medoid_embedding_id"), table_name="embeddingcluster"
    )
    op.drop_index(
        op.f("ix_embeddingcluster_embedding_id"), table_name="embeddingcluster"
    )
    op.drop_index(
        op.f("ix_embeddingcluster_clustering_result_id"), table_name="embeddingcluster"
    )
    op.create_index(
        op.f("ix_embeddingcluster_new_embedding_id"),
        "embeddingcluster",
        ["embedding_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_embeddingcluster_new_clustering_result_id"),
        "embeddingcluster",
        ["clustering_result_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_embeddingcluster_new_cluster_id"),
        "embeddingcluster",
        ["cluster_id"],
        unique=False,
    )
    op.alter_column(
        "embeddingcluster",
        "clustering_result_id",
        existing_type=sa.Uuid(),
        type_=sa.NUMERIC(),
        existing_nullable=False,
    )
    op.alter_column(
        "embeddingcluster",
        "embedding_id",
        existing_type=sa.Uuid(),
        type_=sa.NUMERIC(),
        existing_nullable=False,
    )
    op.alter_column(
        "embeddingcluster",
        "id",
        existing_type=sa.Uuid(),
        type_=sa.NUMERIC(),
        existing_nullable=False,
    )
    op.drop_column("embeddingcluster", "medoid_embedding_id")
    op.create_table(
        "cluster",
        sa.Column("id", sa.NUMERIC(), nullable=False),
        sa.Column("clustering_result_id", sa.NUMERIC(), nullable=False),
        sa.Column("cluster_id", sa.INTEGER(), nullable=False),
        sa.Column("medoid_embedding_id", sa.NUMERIC(), nullable=True),
        sa.Column("size", sa.INTEGER(), nullable=False),
        sa.Column("properties", sqlite.JSON(), nullable=False),
        sa.ForeignKeyConstraint(
            ["clustering_result_id"],
            ["clusteringresult.id"],
        ),
        sa.ForeignKeyConstraint(
            ["medoid_embedding_id"],
            ["embedding.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "clustering_result_id", "cluster_id", name=op.f("unique_cluster_per_result")
        ),
    )
    op.create_index(
        op.f("ix_cluster_medoid_embedding_id"),
        "cluster",
        ["medoid_embedding_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_cluster_clustering_result_id"),
        "cluster",
        ["clustering_result_id"],
        unique=False,
    )
    # ### end Alembic commands ###
